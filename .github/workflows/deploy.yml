name: Deploy to AWS

on:
  push:
    branches: [main]
    paths:
      - 'riot-api-cdk/**'
      - 'rift-rewind-hackathon-aws/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: 'Deploy infrastructure'
        required: false
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend'
        required: false
        default: true
        type: boolean

env:
  AWS_REGION: us-east-2
  CDK_DEFAULT_REGION: us-east-2
  CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Security Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_ENABLE_COMMENTS: false

  deploy-infrastructure:
    needs: security-check
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_infrastructure == 'true')
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-CDK-Deploy
        aws-region: ${{ env.AWS_REGION }}
        # Fallback to access keys if OIDC not configured
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      continue-on-error: true
      id: aws-config
    
    - name: Validate AWS credentials
      if: steps.aws-config.outcome == 'success'
      run: |
        echo "‚úÖ AWS credentials configured successfully"
        aws sts get-caller-identity
      continue-on-error: false
    
    - name: Install CDK dependencies
      working-directory: riot-api-cdk
      run: |
        echo "üì¶ Installing CDK dependencies..."
        npm install
        echo "‚úÖ CDK dependencies installed"
    
    - name: Validate CDK app
      working-directory: riot-api-cdk
      run: |
        echo "üîç Validating CDK application..."
        npx cdk synth --quiet
        echo "‚úÖ CDK application is valid"
    
    - name: Install Lambda dependencies
      run: |
        echo "üêç Installing Lambda dependencies..."
        cd riot-api-cdk/lambda/riot-api-source
        pip install aws-xray-sdk -t . --quiet
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + || true
        cd ../summoner-lookup-source
        pip install aws-xray-sdk -t . --quiet
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + || true
        echo "‚úÖ Lambda dependencies installed"
    
    - name: CDK Bootstrap
      working-directory: riot-api-cdk
      if: steps.aws-config.outcome == 'success'
      run: |
        echo "üöÄ Bootstrapping CDK..."
        npx cdk bootstrap --require-approval never
        echo "‚úÖ CDK bootstrap complete"
      continue-on-error: false
    
    - name: Deploy CDK stack
      working-directory: riot-api-cdk
      if: steps.aws-config.outcome == 'success'
      run: |
        echo "üèóÔ∏è Deploying CDK stack..."
        npx cdk deploy --require-approval never --outputs-file outputs.json
        echo "‚úÖ CDK deployment complete"
      continue-on-error: false
    
    - name: Validate Lambda deployment
      if: steps.aws-config.outcome == 'success'
      run: |
        echo "üîç Validating Lambda deployment..."
        MAIN_FUNCTION=$(aws lambda list-functions --query 'Functions[?contains(FunctionName, `RiotApiFunction`)].FunctionName' --output text)
        SUMMONER_FUNCTION=$(aws lambda list-functions --query 'Functions[?contains(FunctionName, `SummonerLookup`)].FunctionName' --output text)
        
        if [ -n "$MAIN_FUNCTION" ]; then
          echo "‚úÖ Found main Lambda function: $MAIN_FUNCTION"
        else
          echo "‚ùå Main Lambda function not found"
          exit 1
        fi
        
        if [ -n "$SUMMONER_FUNCTION" ]; then
          echo "‚úÖ Found summoner lookup Lambda function: $SUMMONER_FUNCTION"
        else
          echo "‚ùå Summoner lookup Lambda function not found"
          exit 1
        fi
      continue-on-error: false
    
    - name: Get Lambda URLs
      id: lambda-url
      if: steps.aws-config.outcome == 'success'
      run: |
        echo "üîó Getting Lambda Function URLs..."
        MAIN_URL=$(aws cloudformation describe-stacks --stack-name RiotApiCdkStack --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionUrl`].OutputValue' --output text)
        SUMMONER_URL=$(aws cloudformation describe-stacks --stack-name RiotApiCdkStack --query 'Stacks[0].Outputs[?OutputKey==`SummonerLookupUrl`].OutputValue' --output text)
        
        if [ -z "$MAIN_URL" ] || [ "$MAIN_URL" = "None" ]; then
          echo "‚ùå Failed to get main Lambda URL"
          exit 1
        fi
        
        if [ -z "$SUMMONER_URL" ] || [ "$SUMMONER_URL" = "None" ]; then
          echo "‚ùå Failed to get summoner lookup URL"
          exit 1
        fi
        
        echo "lambda-url=$MAIN_URL" >> $GITHUB_OUTPUT
        echo "summoner-url=$SUMMONER_URL" >> $GITHUB_OUTPUT
        echo "LAMBDA_URL=$MAIN_URL" >> $GITHUB_ENV
        echo "SUMMONER_URL=$SUMMONER_URL" >> $GITHUB_ENV
        echo "‚úÖ Main Lambda URL: $MAIN_URL"
        echo "‚úÖ Summoner Lookup URL: $SUMMONER_URL"
      continue-on-error: false
    
    outputs:
      lambda-url: ${{ steps.lambda-url.outputs.lambda-url }}

  deploy-frontend:
    needs: [security-check]
    runs-on: ubuntu-latest
    if: |
      always() && (needs.security-check.result == 'success')
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'
        cache-dependency-path: rift-rewind-hackathon-aws/yarn.lock
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-Frontend-Deploy
        aws-region: us-east-1
        # Fallback to access keys if OIDC not configured
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      continue-on-error: true
      id: aws-config
    
    - name: Validate AWS credentials
      if: steps.aws-config.outcome == 'success'
      run: |
        echo "‚úÖ AWS credentials configured successfully"
        aws sts get-caller-identity
      continue-on-error: false
    
    - name: Install frontend dependencies
      working-directory: rift-rewind-hackathon-aws
      run: |
        echo "üì¶ Installing frontend dependencies..."
        yarn install
        echo "‚úÖ Frontend dependencies installed"
    
    - name: Validate environment
      working-directory: rift-rewind-hackathon-aws
      run: |
        echo "üîç Validating build environment..."
        echo "Node version: $(node --version)"
        echo "Yarn version: $(yarn --version)"
        echo "API URL: ${{ needs.deploy-infrastructure.outputs.lambda-url || 'Not provided' }}"
        if [ -f "package.json" ]; then
          echo "‚úÖ package.json found"
        else
          echo "‚ùå package.json not found"
          exit 1
        fi
    
    - name: Build frontend
      working-directory: rift-rewind-hackathon-aws
      env:
        VITE_API_URL: ${{ needs.deploy-infrastructure.outputs.lambda-url || '' }}
      run: |
        echo "üèóÔ∏è Building frontend application..."
        yarn build
        echo "‚úÖ Frontend build complete"
      continue-on-error: false
    
    - name: Validate build output
      working-directory: rift-rewind-hackathon-aws
      run: |
        echo "üîç Validating build output..."
        if [ -d "dist" ]; then
          echo "‚úÖ dist directory exists"
          echo "Build size: $(du -sh dist | cut -f1)"
          echo "Files: $(find dist -type f | wc -l)"
        else
          echo "‚ùå dist directory not found"
          exit 1
        fi
        if [ -f "dist/index.html" ]; then
          echo "‚úÖ index.html found"
        else
          echo "‚ùå index.html not found"
          exit 1
        fi
    
    - name: Validate S3 bucket access
      if: steps.aws-config.outcome == 'success'
      run: |
        echo "üîç Validating S3 bucket access..."
        aws s3 ls s3://awsaerospace.org/learning/api/ --recursive | head -5 || echo "Bucket is empty or inaccessible"
        echo "‚úÖ S3 bucket access validated"
    
    - name: Deploy to S3
      working-directory: rift-rewind-hackathon-aws
      if: steps.aws-config.outcome == 'success'
      run: |
        echo "üöÄ Deploying to S3..."
        echo "Syncing to learning/api path only..."
        aws s3 sync dist/ s3://awsaerospace.org/learning/api/ --delete --exact-timestamps
        echo "‚úÖ S3 deployment complete"
      continue-on-error: false
    
    - name: Validate S3 deployment
      if: steps.aws-config.outcome == 'success'
      run: |
        echo "üîç Validating S3 deployment..."
        if aws s3 ls s3://awsaerospace.org/learning/api/index.html; then
          echo "‚úÖ index.html deployed to learning/api"
        else
          echo "‚ùå index.html not found in learning/api"
          exit 1
        fi
    
    - name: Invalidate CloudFront
      if: steps.aws-config.outcome == 'success'
      run: |
        echo "üîÑ Invalidating CloudFront cache..."
        INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id ECC3LP1BL2CZS --paths "/learning/api/*" --query 'Invalidation.Id' --output text)
        echo "‚úÖ CloudFront invalidation created: $INVALIDATION_ID"
      continue-on-error: false