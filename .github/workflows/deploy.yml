name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Security Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-infrastructure:
    needs: security-check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: riot-api-cdk/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Install CDK dependencies
      working-directory: riot-api-cdk
      run: npm ci
    
    - name: Install Lambda dependencies
      working-directory: riot-api-cdk/lambda/riot-api-source
      run: |
        pip install aws-xray-sdk -t .
        # Remove unnecessary files to reduce package size
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + || true
    
    - name: Deploy CDK stack
      working-directory: riot-api-cdk
      run: |
        npx cdk bootstrap --require-approval never
        npx cdk deploy --require-approval never
    
    - name: Get Lambda URL
      id: lambda-url
      run: |
        URL=$(aws cloudformation describe-stacks --stack-name RiotApiCdkStack --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionUrl`].OutputValue' --output text)
        echo "lambda-url=$URL" >> $GITHUB_OUTPUT
        echo "LAMBDA_URL=$URL" >> $GITHUB_ENV
    
    outputs:
      lambda-url: ${{ steps.lambda-url.outputs.lambda-url }}

  deploy-frontend:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: rift-rewind-hackathon-aws/yarn.lock
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Install frontend dependencies
      working-directory: rift-rewind-hackathon-aws
      run: yarn install --frozen-lockfile
    
    - name: Build frontend
      working-directory: rift-rewind-hackathon-aws
      env:
        VITE_API_URL: ${{ needs.deploy-infrastructure.outputs.lambda-url }}
      run: yarn build
    
    - name: Deploy to S3
      working-directory: rift-rewind-hackathon-aws
      run: |
        aws s3 sync dist/ s3://awsaerospace.org/learning/api/ --delete
        aws s3 sync dist/ s3://awsaerospace.org/apitraining/ --delete
    
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation --distribution-id ECC3LP1BL2CZS --paths "/learning/api/*" "/apitraining/*"